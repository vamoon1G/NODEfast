const ExcelJS = require('exceljs');
const puppeteer = require('puppeteer');
const express = require('express');
const chalk = require('chalk');
require('dotenv').config()
const app = express();
const port = 3000;






app.use(express.json());

app.use(express.static('public'));


const TelegramBot = require('node-telegram-bot-api');
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const bot = new TelegramBot(process.env.TOKEN , { polling: true });
const userStates = {}; 
const allowedUserIds = [1190709922,6358500758];
const MY_TELEGRAM_ID = '1190709922';


// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let awaitingCaptchaInput = false;
let currentChatId = null;

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—Å –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É
  if (userId === MY_TELEGRAM_ID&& awaitingCaptchaInput) {
    const captchaInput = msg.text;
    awaitingCaptchaInput = false; // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞

    try {
      // –í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–º—É
      const page = await browser.newPage();
      await page.goto(link);

      await page.type('#input-captcha', captchaInput);
      await page.click('#submit-captcha-button');

      // –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, —á—Ç–æ –∫–∞–ø—á–∞ –ø—Ä–∏–Ω—è—Ç–∞
      await page.waitForNavigation();

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–∞–ø—á–∏
      console.log('–ö–∞–ø—á–∞ –≤–≤–µ–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.');

      // –ó–∞–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
      await page.close();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–∞–ø—á–∏:', error);
      // –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–∞–ø—á–∏.');
    }
  }
});



bot.on('message', async (msg) => { 
  const chatId = msg.chat.id;
  const text = msg.text;
  const userId = msg.from.id;



  if (!allowedUserIds.includes(userId)) {
    await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞.');
    return; 
  }
  
  if (!msg.text) {
    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
    return; 
  }

  if(userStates[chatId] && userStates[chatId].awaitingPrice) {
     
    const price = parseFloat(text);
    console.log(`–ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞: ${text}`); 
    if (isNaN(price)) {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Ü–µ–Ω—É.');
      return;
    }


    userStates[chatId].price = price;
    userStates[chatId].awaitingPrice = false;
    await processUrlsAndWriteToExcel([userStates[chatId].url], price, chatId); 
    await bot.sendMessage(chatId, 'üî∞–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ãüìù');
    await bot.sendMessage(chatId, 'üì±–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–π URLüì≤');
    delete userStates[chatId];
    return;

  } else {
    const urls = text.split(/\s+/).filter(url => url.startsWith('http://') || url.startsWith('https://'));
    if(urls.length > 0) {
      userStates[chatId] = { url: urls[0], awaitingPrice: true };
      const response = await fetch('http://localhost:3000/process-urls', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ urls }),
    });
    let sentMessage = await bot.sendMessage(chatId, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL...');
    let messageId = sentMessage.message_id;

    await new Promise(resolve => setTimeout(resolve, 1000)); 
    await bot.editMessageText('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', { chat_id: chatId, message_id: messageId });
    await new Promise(resolve => setTimeout(resolve, 1000)); 
    await bot.editMessageText('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', { chat_id: chatId, message_id: messageId });
    await new Promise(resolve => setTimeout(resolve, 1000)); 
    await bot.editMessageText('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', { chat_id: chatId, message_id: messageId });
    await new Promise(resolve => setTimeout(resolve, 1000)); 
    await bot.editMessageText('üî∞–ì–æ—Ç–æ–≤–æüî∞', { chat_id: chatId, message_id: messageId });
    await new Promise(resolve => setTimeout(resolve, 900)); 
    await bot.editMessageText('üìÅ–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã.[100%]', { chat_id: chatId, message_id: messageId });

      
      userStates[chatId] = { url: urls[0], awaitingPrice: true };
      await bot.sendMessage(chatId, '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞üí∏:');
    } else {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.');
    }
  }
});

app.post('/process-urls', async (req, res) => {
    const { urls } = req.body; 
    console.log(urls); 
    try {
        res.json({message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã'});
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL –∏ –∑–∞–ø–∏—Å–∏ –≤ Excel:', error);
        res.status(500).json({message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö'});
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
    console.log(chalk.underline.bold.bgGreenBright.blue(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`));
});


async function writeToExcel(data, filePath) {
  const workbook = new ExcelJS.Workbook(); 
  try {
    await workbook.xlsx.readFile(filePath);
    let worksheet = workbook.getWorksheet('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤');
    
    if (!worksheet) {
      console.error('–õ–∏—Å—Ç "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    let rowNumber = worksheet.lastRow ? worksheet.lastRow.number + 1 : 3;

    console.log(chalk.underline.bold.bgGreen.black('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Excel'));
    data.forEach(({ categoryTitle, productTitle, brand, manufacturerArticle, price , model }) => {
      const productId = `krep_${rowNumber - 2}`;

      worksheet.getCell(`A${rowNumber}`).value = productId;
      worksheet.getCell(`B${rowNumber}`).value = "–î–æ—Å—Ç—É–ø–µ–Ω";
      worksheet.getCell(`C${rowNumber}`).value = categoryTitle;
      worksheet.getCell(`G${rowNumber}`).value = productTitle;
      worksheet.getCell(`H${rowNumber}`).value = price; 
      worksheet.getCell(`D${rowNumber}`).value = brand;
      worksheet.getCell(`E${rowNumber}`).value = manufacturerArticle;
      worksheet.getCell(`F${rowNumber}`).value = model; 
      worksheet.getCell(`J${rowNumber}`).value = "100";
      worksheet.getCell(`P${rowNumber}`).value = "17";
      worksheet.getCell(`Q${rowNumber}`).value = "4 –¥–Ω—è";
      worksheet.getCell(`K${rowNumber}`).value = "–ù–µ –æ–±–ª–∞–≥–∞–µ—Ç—Å—è";
      rowNumber++;
  });

    await workbook.xlsx.writeFile(filePath);
    console.log(chalk.underline.bold.bgRgb(222, 78, 29).black('–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª:', filePath));


  } catch (error) {
    console.error(chalk.underline.bold.bgRed.black('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Excel:', error));
  }
}

async function processUrlsAndWriteToExcel(urls, price) {
  let categoriesTitles = [];
  let browser;
  try {
    const browser = await puppeteer.launch({
      executablePath: '/usr/bin/google-chrome',
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    

  const page = await browser.newPage();
  await page.setUserAgent('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36');

  try {
  for (let link of urls) {
    let categoryTitle = ''; 
    let productTitle = '';

    try {
      // –í–∞—à –Ω–æ–≤—ã–π –∫–æ–¥ –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—á–∏
      const productTitleSelector = '.pdp-header__title.pdp-header__title_only-title';
      await page.waitForSelector(productTitleSelector, { timeout: 5000 });
      productTitle = await page.evaluate(selector => {
        const element = document.querySelector(selector);
        return element ? element.innerText.trim() : null;
      }, productTitleSelector);

      if (productTitle) {
        console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: ${productTitle}`);
        // –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ
        // –í —ç—Ç–æ–π —á–∞—Å—Ç–∏ –∫–æ–¥–∞, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ —Å–±–æ—Ä—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–µ
      } else {
        throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      }
    } catch (error) {
      console.error(error.message);
      const captchaScreenshotBuffer = await page.screenshot();
      await bot.sendPhoto(MY_TELEGRAM_ID, captchaScreenshotBuffer, {
        caption: '–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É:'
      });

    }


    const navigationPromise = page.waitForNavigation({waitUntil: 'networkidle0'});
    try {
      await page.goto(link, { waitUntil: 'domcontentloaded', timeout: 60000 });
      await navigationPromise;


      try {  
        await page.waitForSelector('.categories__category-item_title', { timeout: 5000 }); 
        categoryTitle = await page.evaluate(() => {
        const element = document.querySelector('.categories__category-item_title');
        return element ? element.textContent.trim() : '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
      });
    } catch {
      console.error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è', link);
      productTitle = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'; 
    }


      await navigationPromise;

      try {
        await page.waitForSelector('.pdp-header__title.pdp-header__title_only-title', { timeout: 5000 }); 
        productTitle = await page.evaluate(() => {
          const element = document.querySelector('.pdp-header__title.pdp-header__title_only-title');
          return element ? element.textContent.trim() : '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
        });
      } catch {
        console.error('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è', link);
        productTitle = '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'; 

       
      }

      await navigationPromise;
      const { brand, manufacturerArticle, model } = await page.evaluate(() => {
        const items = Array.from(document.querySelectorAll('.pdp-specs__item'));
        const data = { brand: '', manufacturerArticle: '', model: '' };
  
        items.forEach((item) => {
          const nameElement = item.querySelector('.pdp-specs__item-name');
          const valueElement = item.querySelector('.pdp-specs__item-value');
          if (!nameElement || !valueElement) return;
  
          const name = nameElement.textContent.trim();
          const value = valueElement.textContent.trim();
  
          if (name === "–ë—Ä–µ–Ω–¥") {
            data.brand = value;
          } else if (name === "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è") {
            data.manufacturerArticle = value;
          } else if (name === "–ú–æ–¥–µ–ª—å") { 
            data.model = value;
          }
        });
      
        return data;
      });
      await navigationPromise;

      categoriesTitles.push({ categoryTitle, productTitle, brand, manufacturerArticle , model , price });
    } catch (error) {
      console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${link}:`, error);
    }
  }

  await writeToExcel(categoriesTitles, 'public/–ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç excel —Ñ–∏–¥.xlsx');
  await browser.close();
} catch (error) {
  console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL:`, error);
} finally {
  await browser.close();
}


} catch (error) {
  console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
} finally {
  if (browser) {
    await browser.close();
  }
}}